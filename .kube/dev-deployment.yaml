apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: api
    app.kubernetes.io/part-of: sciobjdbs
    app.kubernetes.io/version: v0.1.0
  name: sciobjdbs
  namespace: sciobjsdb-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/part-of: sciobjdbs
      app.kubernetes.io/version: v0.1.0
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
      labels:
        app.kubernetes.io/name: api
        app.kubernetes.io/part-of: sciobjdbs
        app.kubernetes.io/version: v0.1.0
    spec:
      volumes:
        - name: config
          configMap:
            name: sciobjdbs-backend-dev-config
      containers:
        - env:
          - name: MongoDBPasswd
            valueFrom:
              secretKeyRef:
                key: mongodb-root-password 
                name: biodatadbmongo-dev-mongodb-sharded 
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AccessKey
                name: s3
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: SecretKey
                name: s3
          image: foo
          name: sciobjdbs
          volumeMounts:
            - name: config
              mountPath: "/config"
              readOnly: true
          ports:
          - containerPort: 9000
---
apiVersion: v1
kind: Service
metadata:
  name: sciobjdbs
  namespace: sciobjsdb-dev
spec:
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/part-of: sciobjdbs
    app.kubernetes.io/version: v0.1.0
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: indexedobjdbuploader
  namespace: sciobjsdb-dev
  annotations:
    cert-manager.io/issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
spec:
  rules:
  - host: api.dev.sciobjsdbs.ingress.rancher2.computational.bio
    http:
      paths:
      - backend:
          serviceName: sciobjsdbs
          servicePort: 9000
        path: /
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - api.dev.sciobjsdbs.ingress.rancher2.computational.bio
    secretName: api-sciobjsdbs-dev-private-cert # < cert-manager will store the created certificate in this secret.
---
